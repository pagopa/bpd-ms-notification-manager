# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  branches:
    include:
      - master
      - develop
      - release/*
      - features/*
  paths:
    include:
      - api/*
      - app/*
      - core/*
      - integration/*
      - pom.xml

resources:
  - repo: self

variables:

  TZ: 'Europe/Rome'

  # Wiremock Port
  WiremockPort: '8080'
  REST_CLIENT_READ_TIMEOUT: '10000'
  REST_CLIENT_CONNECT_TIMEOUT: '10000'

  dockerfileRelativePath: 'Dockerfile'

  # Agent VM image name for Build
  vmImageNameDefault: 'ubuntu-latest'

  # Image Repository Name
  imageRepository: 'bpdmsnotificationmanager'

  isToDeploy: $[and(ne(variables['Build.Reason'], 'PullRequest'), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release')))]
  isSIT: $[eq(variables['Build.SourceBranch'], 'refs/heads/release/st')]
  isUAT: $[eq(variables['Build.SourceBranch'], 'refs/heads/release/uat')]
  isPROD: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')]

  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/release/st') }}:
    dockerRegistryServiceConnection: 'cstarregistry-connection'
    containerRegistry: 'cstarregistry.azurecr.io'
    deployment: deployment-sit
    imagePullSecret: 'cstarregistry-auth'
  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/release/uat') }}:
    dockerRegistryServiceConnection: 'cstaruatregistry-connection'
    containerRegistry: 'cstaruatregistry.azurecr.io'
    deployment: deployment-uat
    imagePullSecret: 'cstaruatregistry-auth'
  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
    dockerRegistryServiceConnection: 'cstarprodregistry-connection'
    containerRegistry: 'cstarprodregistry.azurecr.io'
    deployment: deployment-prod
    imagePullSecret: 'cstarprodregistry-auth'
  ${{ if and(ne(variables['Build.SourceBranch'], 'refs/heads/release/st'), ne(variables['Build.SourceBranch'], 'refs/heads/release/uat'), ne(variables['Build.SourceBranch'], 'refs/heads/master')) }}:
    dockerRegistryServiceConnection: 'cstarregistry-connection'

stages:
  - stage: Build
    displayName: Build stage
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(vmImageNameDefault)
        steps:
          - task: DownloadSecureFile@1
            displayName: 'download settings.xml for Maven'
            name: settingsxml
            inputs:
              secureFile: 'settings.xml'
              retryCount: '2'
          - task: Bash@3
            displayName: Get POM version
            name: getpomversion
            condition: and(succeeded(), eq(variables.isToDeploy, true))
            inputs:
              targetType: 'inline'
              script: |
                version=$(cat pom.xml | grep "^    <version>.*</version>$" | awk -F'[><]' '{print $3}')
                echo "##vso[task.setvariable variable=pomversion;isOutput=true]$version"
              failOnStderr: true      
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                echo $POMVERSION
              failOnStderr: true              
  - stage: Deploy
    displayName: Deploy stage
    dependsOn: Build
    condition: and(succeeded(), eq(variables.isToDeploy, true))
    variables:
    # map the output variable from A into this job
      varFromA: $[ stageDependencies ]
    jobs:
      - deployment: Deploy1
        displayName: Deploy SIT
        condition: eq(variables.isSIT, true)
        pool:
          vmImage: $(vmImageNameDefault)
        environment: 'sit.bpd-test'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none
                - script: echo $(varFromA)
      - deployment: Deploy2
        displayName: Deploy UAT
        condition: eq(variables.isUAT, true)
        pool:
          name: uat_agent_pool
        environment: 'uat'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none
                - task: DownloadPipelineArtifact@2
                  inputs:
                    buildType: 'current'
                    artifactName: 'manifests'
                    targetPath: '$(Pipeline.Workspace)/manifests'
                - task: KubernetesManifest@0
                  displayName: Deploy to Kubernetes cluster
                  inputs:
                    action: 'deploy'
                    kubernetesServiceConnection: 'ddsakstest-self-connection-bpd-uat'
                    namespace: 'bpd-uat'
                    manifests: |
                      $(Pipeline.Workspace)/manifests/$(deployment).yml
                      $(Pipeline.Workspace)/manifests/service.yml
                    containers: '$(containerRegistry)/$(imageRepository):$(pomversion)'
                    imagePullSecrets: '$(imagePullSecret)'
      - deployment: Deploy3
        displayName: Deploy PROD
        condition: eq(variables.isPROD, true)
        pool:
          name: prod-agent-pool
        environment: 'prod'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none
                - task: DownloadPipelineArtifact@2
                  inputs:
                    buildType: 'current'
                    artifactName: 'manifests'
                    targetPath: '$(Pipeline.Workspace)/manifests'
                - task: KubernetesManifest@0
                  displayName: Deploy to Kubernetes cluster
                  inputs:
                    action: 'deploy'
                    kubernetesServiceConnection: 'u87aksprod-bpd-self-connection'
                    namespace: 'bpd'
                    manifests: |
                      $(Pipeline.Workspace)/manifests/$(deployment).yml
                      $(Pipeline.Workspace)/manifests/service.yml
                    containers: '$(containerRegistry)/$(imageRepository):$(pomversion)'
                    imagePullSecrets: '$(imagePullSecret)'